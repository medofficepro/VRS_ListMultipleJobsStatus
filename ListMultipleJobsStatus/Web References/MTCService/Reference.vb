'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5472
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5472.
'
Namespace MTCService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MTClientServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class MTClientService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetPathInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MTCJobListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MTCJobListTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private chkLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLevelsbyUserIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getExtendedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getExtendedPPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDictationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getNotesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckOutAuditDictationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckOutDictationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDictationInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuditTemplatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getInstructionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPhysicianTemplatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTemplateAttributesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DemoLookUpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MTC_DemoLookUpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getClientCommentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMTCClientCommentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPhySamplesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getRefPhyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCommentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckInAuditDictationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckInDictationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTranscriptionStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewPatientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CompletedJobsListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuditedJobsListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ETS_FilesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SplitAudioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getActLocationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAutoDownloadLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendMailAlertsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getXMLDocOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setXMLDocOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ListMultipleJobsStatus.My.MySettings.Default.ListMultipleJobsStatus_MTCService_MTClientService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetPathInfoCompleted As GetPathInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event MTCJobListCompleted As MTCJobListCompletedEventHandler
        
        '''<remarks/>
        Public Event MTCJobListTestCompleted As MTCJobListTestCompletedEventHandler
        
        '''<remarks/>
        Public Event chkLoginCompleted As chkLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event getLevelsbyUserIDCompleted As getLevelsbyUserIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getExtendedCompleted As getExtendedCompletedEventHandler
        
        '''<remarks/>
        Public Event getExtendedPPCompleted As getExtendedPPCompletedEventHandler
        
        '''<remarks/>
        Public Event getDictationCompleted As getDictationCompletedEventHandler
        
        '''<remarks/>
        Public Event getNotesCompleted As getNotesCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckOutAuditDictationCompleted As CheckOutAuditDictationCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckOutDictationCompleted As CheckOutDictationCompletedEventHandler
        
        '''<remarks/>
        Public Event getDictationInfoCompleted As getDictationInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event AuditTemplatesCompleted As AuditTemplatesCompletedEventHandler
        
        '''<remarks/>
        Public Event getInstructionsCompleted As getInstructionsCompletedEventHandler
        
        '''<remarks/>
        Public Event getPhysicianTemplatesCompleted As getPhysicianTemplatesCompletedEventHandler
        
        '''<remarks/>
        Public Event getTemplateAttributesCompleted As getTemplateAttributesCompletedEventHandler
        
        '''<remarks/>
        Public Event DemoLookUpCompleted As DemoLookUpCompletedEventHandler
        
        '''<remarks/>
        Public Event MTC_DemoLookUpCompleted As MTC_DemoLookUpCompletedEventHandler
        
        '''<remarks/>
        Public Event getClientCommentsCompleted As getClientCommentsCompletedEventHandler
        
        '''<remarks/>
        Public Event getMTCClientCommentsCompleted As getMTCClientCommentsCompletedEventHandler
        
        '''<remarks/>
        Public Event getPhySamplesCompleted As getPhySamplesCompletedEventHandler
        
        '''<remarks/>
        Public Event getRefPhyCompleted As getRefPhyCompletedEventHandler
        
        '''<remarks/>
        Public Event getCommentsCompleted As getCommentsCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckInAuditDictationCompleted As CheckInAuditDictationCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckInDictationCompleted As CheckInDictationCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTranscriptionStatusCompleted As UpdateTranscriptionStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewPatientCompleted As AddNewPatientCompletedEventHandler
        
        '''<remarks/>
        Public Event CompletedJobsListCompleted As CompletedJobsListCompletedEventHandler
        
        '''<remarks/>
        Public Event AuditedJobsListCompleted As AuditedJobsListCompletedEventHandler
        
        '''<remarks/>
        Public Event ETS_FilesCompleted As ETS_FilesCompletedEventHandler
        
        '''<remarks/>
        Public Event SplitAudioCompleted As SplitAudioCompletedEventHandler
        
        '''<remarks/>
        Public Event getActLocationsCompleted As getActLocationsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAutoDownloadLogCompleted As UpdateAutoDownloadLogCompletedEventHandler
        
        '''<remarks/>
        Public Event SendMailAlertsCompleted As SendMailAlertsCompletedEventHandler
        
        '''<remarks/>
        Public Event getXMLDocCompleted As getXMLDocCompletedEventHandler
        
        '''<remarks/>
        Public Event setXMLDocCompleted As setXMLDocCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPathInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPathInfo() As String
            Dim results() As Object = Me.Invoke("GetPathInfo", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPathInfoAsync()
            Me.GetPathInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPathInfoAsync(ByVal userState As Object)
            If (Me.GetPathInfoOperationCompleted Is Nothing) Then
                Me.GetPathInfoOperationCompleted = AddressOf Me.OnGetPathInfoOperationCompleted
            End If
            Me.InvokeAsync("GetPathInfo", New Object(-1) {}, Me.GetPathInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPathInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPathInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPathInfoCompleted(Me, New GetPathInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MTCJobList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MTCJobList(ByVal UserID As String, ByVal Level As Long, ByVal isAuditor As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MTCJobList", New Object() {UserID, Level, isAuditor})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MTCJobListAsync(ByVal UserID As String, ByVal Level As Long, ByVal isAuditor As Boolean)
            Me.MTCJobListAsync(UserID, Level, isAuditor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MTCJobListAsync(ByVal UserID As String, ByVal Level As Long, ByVal isAuditor As Boolean, ByVal userState As Object)
            If (Me.MTCJobListOperationCompleted Is Nothing) Then
                Me.MTCJobListOperationCompleted = AddressOf Me.OnMTCJobListOperationCompleted
            End If
            Me.InvokeAsync("MTCJobList", New Object() {UserID, Level, isAuditor}, Me.MTCJobListOperationCompleted, userState)
        End Sub
        
        Private Sub OnMTCJobListOperationCompleted(ByVal arg As Object)
            If (Not (Me.MTCJobListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MTCJobListCompleted(Me, New MTCJobListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MTCJobListTest", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MTCJobListTest(ByVal UserID As String, ByVal Level As Long, ByVal isAuditor As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MTCJobListTest", New Object() {UserID, Level, isAuditor})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MTCJobListTestAsync(ByVal UserID As String, ByVal Level As Long, ByVal isAuditor As Boolean)
            Me.MTCJobListTestAsync(UserID, Level, isAuditor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MTCJobListTestAsync(ByVal UserID As String, ByVal Level As Long, ByVal isAuditor As Boolean, ByVal userState As Object)
            If (Me.MTCJobListTestOperationCompleted Is Nothing) Then
                Me.MTCJobListTestOperationCompleted = AddressOf Me.OnMTCJobListTestOperationCompleted
            End If
            Me.InvokeAsync("MTCJobListTest", New Object() {UserID, Level, isAuditor}, Me.MTCJobListTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnMTCJobListTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.MTCJobListTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MTCJobListTestCompleted(Me, New MTCJobListTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/chkLogin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function chkLogin(ByVal UserName As String, ByVal Password As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("chkLogin", New Object() {UserName, Password})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub chkLoginAsync(ByVal UserName As String, ByVal Password As String)
            Me.chkLoginAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub chkLoginAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.chkLoginOperationCompleted Is Nothing) Then
                Me.chkLoginOperationCompleted = AddressOf Me.OnchkLoginOperationCompleted
            End If
            Me.InvokeAsync("chkLogin", New Object() {UserName, Password}, Me.chkLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnchkLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.chkLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent chkLoginCompleted(Me, New chkLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLevelsbyUserID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLevelsbyUserID(ByVal UserID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getLevelsbyUserID", New Object() {UserID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLevelsbyUserIDAsync(ByVal UserID As String)
            Me.getLevelsbyUserIDAsync(UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLevelsbyUserIDAsync(ByVal UserID As String, ByVal userState As Object)
            If (Me.getLevelsbyUserIDOperationCompleted Is Nothing) Then
                Me.getLevelsbyUserIDOperationCompleted = AddressOf Me.OngetLevelsbyUserIDOperationCompleted
            End If
            Me.InvokeAsync("getLevelsbyUserID", New Object() {UserID}, Me.getLevelsbyUserIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLevelsbyUserIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLevelsbyUserIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLevelsbyUserIDCompleted(Me, New getLevelsbyUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getExtended", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getExtended(ByVal strTransID As String, ByVal strTempID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getExtended", New Object() {strTransID, strTempID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getExtendedAsync(ByVal strTransID As String, ByVal strTempID As String)
            Me.getExtendedAsync(strTransID, strTempID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getExtendedAsync(ByVal strTransID As String, ByVal strTempID As String, ByVal userState As Object)
            If (Me.getExtendedOperationCompleted Is Nothing) Then
                Me.getExtendedOperationCompleted = AddressOf Me.OngetExtendedOperationCompleted
            End If
            Me.InvokeAsync("getExtended", New Object() {strTransID, strTempID}, Me.getExtendedOperationCompleted, userState)
        End Sub
        
        Private Sub OngetExtendedOperationCompleted(ByVal arg As Object)
            If (Not (Me.getExtendedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getExtendedCompleted(Me, New getExtendedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getExtendedPP", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getExtendedPP(ByVal strTransID As String, ByVal strTempID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getExtendedPP", New Object() {strTransID, strTempID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getExtendedPPAsync(ByVal strTransID As String, ByVal strTempID As String)
            Me.getExtendedPPAsync(strTransID, strTempID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getExtendedPPAsync(ByVal strTransID As String, ByVal strTempID As String, ByVal userState As Object)
            If (Me.getExtendedPPOperationCompleted Is Nothing) Then
                Me.getExtendedPPOperationCompleted = AddressOf Me.OngetExtendedPPOperationCompleted
            End If
            Me.InvokeAsync("getExtendedPP", New Object() {strTransID, strTempID}, Me.getExtendedPPOperationCompleted, userState)
        End Sub
        
        Private Sub OngetExtendedPPOperationCompleted(ByVal arg As Object)
            If (Not (Me.getExtendedPPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getExtendedPPCompleted(Me, New getExtendedPPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDictation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getDictation(ByVal strTransID As String, ByVal FileType As String) As String
            Dim results() As Object = Me.Invoke("getDictation", New Object() {strTransID, FileType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getDictationAsync(ByVal strTransID As String, ByVal FileType As String)
            Me.getDictationAsync(strTransID, FileType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getDictationAsync(ByVal strTransID As String, ByVal FileType As String, ByVal userState As Object)
            If (Me.getDictationOperationCompleted Is Nothing) Then
                Me.getDictationOperationCompleted = AddressOf Me.OngetDictationOperationCompleted
            End If
            Me.InvokeAsync("getDictation", New Object() {strTransID, FileType}, Me.getDictationOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDictationOperationCompleted(ByVal arg As Object)
            If (Not (Me.getDictationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDictationCompleted(Me, New getDictationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getNotes", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getNotes(ByVal strTransID As String, ByVal FileType As String) As String
            Dim results() As Object = Me.Invoke("getNotes", New Object() {strTransID, FileType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getNotesAsync(ByVal strTransID As String, ByVal FileType As String)
            Me.getNotesAsync(strTransID, FileType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getNotesAsync(ByVal strTransID As String, ByVal FileType As String, ByVal userState As Object)
            If (Me.getNotesOperationCompleted Is Nothing) Then
                Me.getNotesOperationCompleted = AddressOf Me.OngetNotesOperationCompleted
            End If
            Me.InvokeAsync("getNotes", New Object() {strTransID, FileType}, Me.getNotesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetNotesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getNotesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getNotesCompleted(Me, New getNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckOutAuditDictation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckOutAuditDictation(ByVal TransID As String, ByVal UserID As String, ByVal Level As Long) As Boolean
            Dim results() As Object = Me.Invoke("CheckOutAuditDictation", New Object() {TransID, UserID, Level})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckOutAuditDictationAsync(ByVal TransID As String, ByVal UserID As String, ByVal Level As Long)
            Me.CheckOutAuditDictationAsync(TransID, UserID, Level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckOutAuditDictationAsync(ByVal TransID As String, ByVal UserID As String, ByVal Level As Long, ByVal userState As Object)
            If (Me.CheckOutAuditDictationOperationCompleted Is Nothing) Then
                Me.CheckOutAuditDictationOperationCompleted = AddressOf Me.OnCheckOutAuditDictationOperationCompleted
            End If
            Me.InvokeAsync("CheckOutAuditDictation", New Object() {TransID, UserID, Level}, Me.CheckOutAuditDictationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckOutAuditDictationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckOutAuditDictationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckOutAuditDictationCompleted(Me, New CheckOutAuditDictationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckOutDictation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckOutDictation(ByVal TransID As String, ByVal UserID As String, ByVal Level As Long) As Boolean
            Dim results() As Object = Me.Invoke("CheckOutDictation", New Object() {TransID, UserID, Level})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckOutDictationAsync(ByVal TransID As String, ByVal UserID As String, ByVal Level As Long)
            Me.CheckOutDictationAsync(TransID, UserID, Level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckOutDictationAsync(ByVal TransID As String, ByVal UserID As String, ByVal Level As Long, ByVal userState As Object)
            If (Me.CheckOutDictationOperationCompleted Is Nothing) Then
                Me.CheckOutDictationOperationCompleted = AddressOf Me.OnCheckOutDictationOperationCompleted
            End If
            Me.InvokeAsync("CheckOutDictation", New Object() {TransID, UserID, Level}, Me.CheckOutDictationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckOutDictationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckOutDictationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckOutDictationCompleted(Me, New CheckOutDictationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDictationInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getDictationInfo(ByVal PhyID As String, ByVal UserID As String, ByVal Level As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getDictationInfo", New Object() {PhyID, UserID, Level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getDictationInfoAsync(ByVal PhyID As String, ByVal UserID As String, ByVal Level As Long)
            Me.getDictationInfoAsync(PhyID, UserID, Level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getDictationInfoAsync(ByVal PhyID As String, ByVal UserID As String, ByVal Level As Long, ByVal userState As Object)
            If (Me.getDictationInfoOperationCompleted Is Nothing) Then
                Me.getDictationInfoOperationCompleted = AddressOf Me.OngetDictationInfoOperationCompleted
            End If
            Me.InvokeAsync("getDictationInfo", New Object() {PhyID, UserID, Level}, Me.getDictationInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDictationInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getDictationInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDictationInfoCompleted(Me, New getDictationInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditTemplates", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuditTemplates(ByVal TemplateID As String, ByVal UserID As String, ByVal IsTemplateMod As Boolean) As Integer
            Dim results() As Object = Me.Invoke("AuditTemplates", New Object() {TemplateID, UserID, IsTemplateMod})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuditTemplatesAsync(ByVal TemplateID As String, ByVal UserID As String, ByVal IsTemplateMod As Boolean)
            Me.AuditTemplatesAsync(TemplateID, UserID, IsTemplateMod, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuditTemplatesAsync(ByVal TemplateID As String, ByVal UserID As String, ByVal IsTemplateMod As Boolean, ByVal userState As Object)
            If (Me.AuditTemplatesOperationCompleted Is Nothing) Then
                Me.AuditTemplatesOperationCompleted = AddressOf Me.OnAuditTemplatesOperationCompleted
            End If
            Me.InvokeAsync("AuditTemplates", New Object() {TemplateID, UserID, IsTemplateMod}, Me.AuditTemplatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuditTemplatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuditTemplatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuditTemplatesCompleted(Me, New AuditTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInstructions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getInstructions(ByVal AccID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getInstructions", New Object() {AccID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getInstructionsAsync(ByVal AccID As String)
            Me.getInstructionsAsync(AccID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getInstructionsAsync(ByVal AccID As String, ByVal userState As Object)
            If (Me.getInstructionsOperationCompleted Is Nothing) Then
                Me.getInstructionsOperationCompleted = AddressOf Me.OngetInstructionsOperationCompleted
            End If
            Me.InvokeAsync("getInstructions", New Object() {AccID}, Me.getInstructionsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetInstructionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getInstructionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getInstructionsCompleted(Me, New getInstructionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPhysicianTemplates", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPhysicianTemplates(ByVal PhyID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getPhysicianTemplates", New Object() {PhyID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPhysicianTemplatesAsync(ByVal PhyID As String)
            Me.getPhysicianTemplatesAsync(PhyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPhysicianTemplatesAsync(ByVal PhyID As String, ByVal userState As Object)
            If (Me.getPhysicianTemplatesOperationCompleted Is Nothing) Then
                Me.getPhysicianTemplatesOperationCompleted = AddressOf Me.OngetPhysicianTemplatesOperationCompleted
            End If
            Me.InvokeAsync("getPhysicianTemplates", New Object() {PhyID}, Me.getPhysicianTemplatesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPhysicianTemplatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPhysicianTemplatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPhysicianTemplatesCompleted(Me, New getPhysicianTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTemplateAttributes", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTemplateAttributes(ByVal TempID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getTemplateAttributes", New Object() {TempID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTemplateAttributesAsync(ByVal TempID As String)
            Me.getTemplateAttributesAsync(TempID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTemplateAttributesAsync(ByVal TempID As String, ByVal userState As Object)
            If (Me.getTemplateAttributesOperationCompleted Is Nothing) Then
                Me.getTemplateAttributesOperationCompleted = AddressOf Me.OngetTemplateAttributesOperationCompleted
            End If
            Me.InvokeAsync("getTemplateAttributes", New Object() {TempID}, Me.getTemplateAttributesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTemplateAttributesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTemplateAttributesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTemplateAttributesCompleted(Me, New getTemplateAttributesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DemoLookUp", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DemoLookUp(ByVal DemoAccName As String, ByVal AccountID As String, ByVal SDate As String, ByVal eDate As String, ByVal PFName As String, ByVal PLName As String, ByVal MEDRN As String, ByVal APName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DemoLookUp", New Object() {DemoAccName, AccountID, SDate, eDate, PFName, PLName, MEDRN, APName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DemoLookUpAsync(ByVal DemoAccName As String, ByVal AccountID As String, ByVal SDate As String, ByVal eDate As String, ByVal PFName As String, ByVal PLName As String, ByVal MEDRN As String, ByVal APName As String)
            Me.DemoLookUpAsync(DemoAccName, AccountID, SDate, eDate, PFName, PLName, MEDRN, APName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DemoLookUpAsync(ByVal DemoAccName As String, ByVal AccountID As String, ByVal SDate As String, ByVal eDate As String, ByVal PFName As String, ByVal PLName As String, ByVal MEDRN As String, ByVal APName As String, ByVal userState As Object)
            If (Me.DemoLookUpOperationCompleted Is Nothing) Then
                Me.DemoLookUpOperationCompleted = AddressOf Me.OnDemoLookUpOperationCompleted
            End If
            Me.InvokeAsync("DemoLookUp", New Object() {DemoAccName, AccountID, SDate, eDate, PFName, PLName, MEDRN, APName}, Me.DemoLookUpOperationCompleted, userState)
        End Sub
        
        Private Sub OnDemoLookUpOperationCompleted(ByVal arg As Object)
            If (Not (Me.DemoLookUpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DemoLookUpCompleted(Me, New DemoLookUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MTC_DemoLookUp", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MTC_DemoLookUp(ByVal DemoAccName As String, ByVal AccountID As String, ByVal SDate As String, ByVal eDate As String, ByVal PFName As String, ByVal PLName As String, ByVal MEDRN As String, ByVal APName As String, ByVal DOB As String, ByVal PatID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MTC_DemoLookUp", New Object() {DemoAccName, AccountID, SDate, eDate, PFName, PLName, MEDRN, APName, DOB, PatID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MTC_DemoLookUpAsync(ByVal DemoAccName As String, ByVal AccountID As String, ByVal SDate As String, ByVal eDate As String, ByVal PFName As String, ByVal PLName As String, ByVal MEDRN As String, ByVal APName As String, ByVal DOB As String, ByVal PatID As String)
            Me.MTC_DemoLookUpAsync(DemoAccName, AccountID, SDate, eDate, PFName, PLName, MEDRN, APName, DOB, PatID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MTC_DemoLookUpAsync(ByVal DemoAccName As String, ByVal AccountID As String, ByVal SDate As String, ByVal eDate As String, ByVal PFName As String, ByVal PLName As String, ByVal MEDRN As String, ByVal APName As String, ByVal DOB As String, ByVal PatID As String, ByVal userState As Object)
            If (Me.MTC_DemoLookUpOperationCompleted Is Nothing) Then
                Me.MTC_DemoLookUpOperationCompleted = AddressOf Me.OnMTC_DemoLookUpOperationCompleted
            End If
            Me.InvokeAsync("MTC_DemoLookUp", New Object() {DemoAccName, AccountID, SDate, eDate, PFName, PLName, MEDRN, APName, DOB, PatID}, Me.MTC_DemoLookUpOperationCompleted, userState)
        End Sub
        
        Private Sub OnMTC_DemoLookUpOperationCompleted(ByVal arg As Object)
            If (Not (Me.MTC_DemoLookUpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MTC_DemoLookUpCompleted(Me, New MTC_DemoLookUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getClientComments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getClientComments(ByVal TransID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getClientComments", New Object() {TransID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getClientCommentsAsync(ByVal TransID As String)
            Me.getClientCommentsAsync(TransID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getClientCommentsAsync(ByVal TransID As String, ByVal userState As Object)
            If (Me.getClientCommentsOperationCompleted Is Nothing) Then
                Me.getClientCommentsOperationCompleted = AddressOf Me.OngetClientCommentsOperationCompleted
            End If
            Me.InvokeAsync("getClientComments", New Object() {TransID}, Me.getClientCommentsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetClientCommentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getClientCommentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getClientCommentsCompleted(Me, New getClientCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMTCClientComments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMTCClientComments(ByVal TransID As String, ByVal ContractorID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMTCClientComments", New Object() {TransID, ContractorID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMTCClientCommentsAsync(ByVal TransID As String, ByVal ContractorID As String)
            Me.getMTCClientCommentsAsync(TransID, ContractorID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMTCClientCommentsAsync(ByVal TransID As String, ByVal ContractorID As String, ByVal userState As Object)
            If (Me.getMTCClientCommentsOperationCompleted Is Nothing) Then
                Me.getMTCClientCommentsOperationCompleted = AddressOf Me.OngetMTCClientCommentsOperationCompleted
            End If
            Me.InvokeAsync("getMTCClientComments", New Object() {TransID, ContractorID}, Me.getMTCClientCommentsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMTCClientCommentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMTCClientCommentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMTCClientCommentsCompleted(Me, New getMTCClientCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPhySamples", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPhySamples(ByVal PhyID As String, ByVal sName As String, ByVal sKeyword As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getPhySamples", New Object() {PhyID, sName, sKeyword})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPhySamplesAsync(ByVal PhyID As String, ByVal sName As String, ByVal sKeyword As String)
            Me.getPhySamplesAsync(PhyID, sName, sKeyword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPhySamplesAsync(ByVal PhyID As String, ByVal sName As String, ByVal sKeyword As String, ByVal userState As Object)
            If (Me.getPhySamplesOperationCompleted Is Nothing) Then
                Me.getPhySamplesOperationCompleted = AddressOf Me.OngetPhySamplesOperationCompleted
            End If
            Me.InvokeAsync("getPhySamples", New Object() {PhyID, sName, sKeyword}, Me.getPhySamplesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPhySamplesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPhySamplesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPhySamplesCompleted(Me, New getPhySamplesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRefPhy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getRefPhy(ByVal AccID As String, ByVal WhereClause As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getRefPhy", New Object() {AccID, WhereClause})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getRefPhyAsync(ByVal AccID As String, ByVal WhereClause As String)
            Me.getRefPhyAsync(AccID, WhereClause, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getRefPhyAsync(ByVal AccID As String, ByVal WhereClause As String, ByVal userState As Object)
            If (Me.getRefPhyOperationCompleted Is Nothing) Then
                Me.getRefPhyOperationCompleted = AddressOf Me.OngetRefPhyOperationCompleted
            End If
            Me.InvokeAsync("getRefPhy", New Object() {AccID, WhereClause}, Me.getRefPhyOperationCompleted, userState)
        End Sub
        
        Private Sub OngetRefPhyOperationCompleted(ByVal arg As Object)
            If (Not (Me.getRefPhyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getRefPhyCompleted(Me, New getRefPhyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getComments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getComments(ByVal TransID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getComments", New Object() {TransID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCommentsAsync(ByVal TransID As String)
            Me.getCommentsAsync(TransID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCommentsAsync(ByVal TransID As String, ByVal userState As Object)
            If (Me.getCommentsOperationCompleted Is Nothing) Then
                Me.getCommentsOperationCompleted = AddressOf Me.OngetCommentsOperationCompleted
            End If
            Me.InvokeAsync("getComments", New Object() {TransID}, Me.getCommentsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCommentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCommentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCommentsCompleted(Me, New getCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckInAuditDictation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckInAuditDictation(ByVal UserID As String, ByVal TransID As String, ByVal DS As System.Data.DataSet) As Object
            Dim results() As Object = Me.Invoke("CheckInAuditDictation", New Object() {UserID, TransID, DS})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckInAuditDictationAsync(ByVal UserID As String, ByVal TransID As String, ByVal DS As System.Data.DataSet)
            Me.CheckInAuditDictationAsync(UserID, TransID, DS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckInAuditDictationAsync(ByVal UserID As String, ByVal TransID As String, ByVal DS As System.Data.DataSet, ByVal userState As Object)
            If (Me.CheckInAuditDictationOperationCompleted Is Nothing) Then
                Me.CheckInAuditDictationOperationCompleted = AddressOf Me.OnCheckInAuditDictationOperationCompleted
            End If
            Me.InvokeAsync("CheckInAuditDictation", New Object() {UserID, TransID, DS}, Me.CheckInAuditDictationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckInAuditDictationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckInAuditDictationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckInAuditDictationCompleted(Me, New CheckInAuditDictationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckInDictation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckInDictation(ByVal UserID As String, ByVal TransID As String, ByVal DS As System.Data.DataSet) As Object
            Dim results() As Object = Me.Invoke("CheckInDictation", New Object() {UserID, TransID, DS})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckInDictationAsync(ByVal UserID As String, ByVal TransID As String, ByVal DS As System.Data.DataSet)
            Me.CheckInDictationAsync(UserID, TransID, DS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckInDictationAsync(ByVal UserID As String, ByVal TransID As String, ByVal DS As System.Data.DataSet, ByVal userState As Object)
            If (Me.CheckInDictationOperationCompleted Is Nothing) Then
                Me.CheckInDictationOperationCompleted = AddressOf Me.OnCheckInDictationOperationCompleted
            End If
            Me.InvokeAsync("CheckInDictation", New Object() {UserID, TransID, DS}, Me.CheckInDictationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckInDictationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckInDictationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckInDictationCompleted(Me, New CheckInDictationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTranscriptionStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTranscriptionStatus(ByVal UserID As String, ByVal TransID As String, ByVal CheckInLevel As Long, ByVal UserLevel As Long, ByVal Version As Integer, ByVal LineCount As Integer, ByVal TimeSpent As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UpdateTranscriptionStatus", New Object() {UserID, TransID, CheckInLevel, UserLevel, Version, LineCount, TimeSpent})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTranscriptionStatusAsync(ByVal UserID As String, ByVal TransID As String, ByVal CheckInLevel As Long, ByVal UserLevel As Long, ByVal Version As Integer, ByVal LineCount As Integer, ByVal TimeSpent As Integer)
            Me.UpdateTranscriptionStatusAsync(UserID, TransID, CheckInLevel, UserLevel, Version, LineCount, TimeSpent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTranscriptionStatusAsync(ByVal UserID As String, ByVal TransID As String, ByVal CheckInLevel As Long, ByVal UserLevel As Long, ByVal Version As Integer, ByVal LineCount As Integer, ByVal TimeSpent As Integer, ByVal userState As Object)
            If (Me.UpdateTranscriptionStatusOperationCompleted Is Nothing) Then
                Me.UpdateTranscriptionStatusOperationCompleted = AddressOf Me.OnUpdateTranscriptionStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateTranscriptionStatus", New Object() {UserID, TransID, CheckInLevel, UserLevel, Version, LineCount, TimeSpent}, Me.UpdateTranscriptionStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTranscriptionStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTranscriptionStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTranscriptionStatusCompleted(Me, New UpdateTranscriptionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewPatient", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewPatient(ByVal OriTransID As String, ByVal UserID As String, ByVal UserLevel As Long) As String
            Dim results() As Object = Me.Invoke("AddNewPatient", New Object() {OriTransID, UserID, UserLevel})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewPatientAsync(ByVal OriTransID As String, ByVal UserID As String, ByVal UserLevel As Long)
            Me.AddNewPatientAsync(OriTransID, UserID, UserLevel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewPatientAsync(ByVal OriTransID As String, ByVal UserID As String, ByVal UserLevel As Long, ByVal userState As Object)
            If (Me.AddNewPatientOperationCompleted Is Nothing) Then
                Me.AddNewPatientOperationCompleted = AddressOf Me.OnAddNewPatientOperationCompleted
            End If
            Me.InvokeAsync("AddNewPatient", New Object() {OriTransID, UserID, UserLevel}, Me.AddNewPatientOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewPatientOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewPatientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewPatientCompleted(Me, New AddNewPatientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CompletedJobsList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CompletedJobsList(ByVal JobNumber As Integer, ByVal PhyFirst As String, ByVal PhyLast As String, ByVal sDate As String, ByVal eDate As String, ByVal UserID As String, ByVal UserLevel As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CompletedJobsList", New Object() {JobNumber, PhyFirst, PhyLast, sDate, eDate, UserID, UserLevel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CompletedJobsListAsync(ByVal JobNumber As Integer, ByVal PhyFirst As String, ByVal PhyLast As String, ByVal sDate As String, ByVal eDate As String, ByVal UserID As String, ByVal UserLevel As Long)
            Me.CompletedJobsListAsync(JobNumber, PhyFirst, PhyLast, sDate, eDate, UserID, UserLevel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CompletedJobsListAsync(ByVal JobNumber As Integer, ByVal PhyFirst As String, ByVal PhyLast As String, ByVal sDate As String, ByVal eDate As String, ByVal UserID As String, ByVal UserLevel As Long, ByVal userState As Object)
            If (Me.CompletedJobsListOperationCompleted Is Nothing) Then
                Me.CompletedJobsListOperationCompleted = AddressOf Me.OnCompletedJobsListOperationCompleted
            End If
            Me.InvokeAsync("CompletedJobsList", New Object() {JobNumber, PhyFirst, PhyLast, sDate, eDate, UserID, UserLevel}, Me.CompletedJobsListOperationCompleted, userState)
        End Sub
        
        Private Sub OnCompletedJobsListOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompletedJobsListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CompletedJobsListCompleted(Me, New CompletedJobsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditedJobsList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuditedJobsList(ByVal JobNumber As String, ByVal PhyFirst As String, ByVal PhyLast As String, ByVal sDate As String, ByVal eDate As String, ByVal UserID As String, ByVal UserLevel As Long, ByVal isauditor As Boolean) As Object
            Dim results() As Object = Me.Invoke("AuditedJobsList", New Object() {JobNumber, PhyFirst, PhyLast, sDate, eDate, UserID, UserLevel, isauditor})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuditedJobsListAsync(ByVal JobNumber As String, ByVal PhyFirst As String, ByVal PhyLast As String, ByVal sDate As String, ByVal eDate As String, ByVal UserID As String, ByVal UserLevel As Long, ByVal isauditor As Boolean)
            Me.AuditedJobsListAsync(JobNumber, PhyFirst, PhyLast, sDate, eDate, UserID, UserLevel, isauditor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuditedJobsListAsync(ByVal JobNumber As String, ByVal PhyFirst As String, ByVal PhyLast As String, ByVal sDate As String, ByVal eDate As String, ByVal UserID As String, ByVal UserLevel As Long, ByVal isauditor As Boolean, ByVal userState As Object)
            If (Me.AuditedJobsListOperationCompleted Is Nothing) Then
                Me.AuditedJobsListOperationCompleted = AddressOf Me.OnAuditedJobsListOperationCompleted
            End If
            Me.InvokeAsync("AuditedJobsList", New Object() {JobNumber, PhyFirst, PhyLast, sDate, eDate, UserID, UserLevel, isauditor}, Me.AuditedJobsListOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuditedJobsListOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuditedJobsListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuditedJobsListCompleted(Me, New AuditedJobsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ETS_Files", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ETS_Files() As String
            Dim results() As Object = Me.Invoke("ETS_Files", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ETS_FilesAsync()
            Me.ETS_FilesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ETS_FilesAsync(ByVal userState As Object)
            If (Me.ETS_FilesOperationCompleted Is Nothing) Then
                Me.ETS_FilesOperationCompleted = AddressOf Me.OnETS_FilesOperationCompleted
            End If
            Me.InvokeAsync("ETS_Files", New Object(-1) {}, Me.ETS_FilesOperationCompleted, userState)
        End Sub
        
        Private Sub OnETS_FilesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ETS_FilesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ETS_FilesCompleted(Me, New ETS_FilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SplitAudio", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SplitAudio(ByVal CommandArg As String) As Boolean
            Dim results() As Object = Me.Invoke("SplitAudio", New Object() {CommandArg})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SplitAudioAsync(ByVal CommandArg As String)
            Me.SplitAudioAsync(CommandArg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SplitAudioAsync(ByVal CommandArg As String, ByVal userState As Object)
            If (Me.SplitAudioOperationCompleted Is Nothing) Then
                Me.SplitAudioOperationCompleted = AddressOf Me.OnSplitAudioOperationCompleted
            End If
            Me.InvokeAsync("SplitAudio", New Object() {CommandArg}, Me.SplitAudioOperationCompleted, userState)
        End Sub
        
        Private Sub OnSplitAudioOperationCompleted(ByVal arg As Object)
            If (Not (Me.SplitAudioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SplitAudioCompleted(Me, New SplitAudioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getActLocations", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getActLocations(ByVal ActID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getActLocations", New Object() {ActID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getActLocationsAsync(ByVal ActID As String)
            Me.getActLocationsAsync(ActID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getActLocationsAsync(ByVal ActID As String, ByVal userState As Object)
            If (Me.getActLocationsOperationCompleted Is Nothing) Then
                Me.getActLocationsOperationCompleted = AddressOf Me.OngetActLocationsOperationCompleted
            End If
            Me.InvokeAsync("getActLocations", New Object() {ActID}, Me.getActLocationsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetActLocationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getActLocationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getActLocationsCompleted(Me, New getActLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAutoDownloadLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAutoDownloadLog(ByVal UserID As String, ByVal State As Boolean) As Integer
            Dim results() As Object = Me.Invoke("UpdateAutoDownloadLog", New Object() {UserID, State})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAutoDownloadLogAsync(ByVal UserID As String, ByVal State As Boolean)
            Me.UpdateAutoDownloadLogAsync(UserID, State, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAutoDownloadLogAsync(ByVal UserID As String, ByVal State As Boolean, ByVal userState As Object)
            If (Me.UpdateAutoDownloadLogOperationCompleted Is Nothing) Then
                Me.UpdateAutoDownloadLogOperationCompleted = AddressOf Me.OnUpdateAutoDownloadLogOperationCompleted
            End If
            Me.InvokeAsync("UpdateAutoDownloadLog", New Object() {UserID, State}, Me.UpdateAutoDownloadLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAutoDownloadLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAutoDownloadLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAutoDownloadLogCompleted(Me, New UpdateAutoDownloadLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailAlerts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendMailAlerts(ByVal strFrom As String, ByVal strTo As String, ByVal strSubject As String, ByVal strBody As String) As String
            Dim results() As Object = Me.Invoke("SendMailAlerts", New Object() {strFrom, strTo, strSubject, strBody})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMailAlertsAsync(ByVal strFrom As String, ByVal strTo As String, ByVal strSubject As String, ByVal strBody As String)
            Me.SendMailAlertsAsync(strFrom, strTo, strSubject, strBody, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMailAlertsAsync(ByVal strFrom As String, ByVal strTo As String, ByVal strSubject As String, ByVal strBody As String, ByVal userState As Object)
            If (Me.SendMailAlertsOperationCompleted Is Nothing) Then
                Me.SendMailAlertsOperationCompleted = AddressOf Me.OnSendMailAlertsOperationCompleted
            End If
            Me.InvokeAsync("SendMailAlerts", New Object() {strFrom, strTo, strSubject, strBody}, Me.SendMailAlertsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMailAlertsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMailAlertsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMailAlertsCompleted(Me, New SendMailAlertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getXMLDoc", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getXMLDoc(ByVal TranscriptionID As String) As String
            Dim results() As Object = Me.Invoke("getXMLDoc", New Object() {TranscriptionID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getXMLDocAsync(ByVal TranscriptionID As String)
            Me.getXMLDocAsync(TranscriptionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getXMLDocAsync(ByVal TranscriptionID As String, ByVal userState As Object)
            If (Me.getXMLDocOperationCompleted Is Nothing) Then
                Me.getXMLDocOperationCompleted = AddressOf Me.OngetXMLDocOperationCompleted
            End If
            Me.InvokeAsync("getXMLDoc", New Object() {TranscriptionID}, Me.getXMLDocOperationCompleted, userState)
        End Sub
        
        Private Sub OngetXMLDocOperationCompleted(ByVal arg As Object)
            If (Not (Me.getXMLDocCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getXMLDocCompleted(Me, New getXMLDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setXMLDoc", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setXMLDoc(ByVal TranscriptionID As String, ByVal TranscriptionData As String) As Boolean
            Dim results() As Object = Me.Invoke("setXMLDoc", New Object() {TranscriptionID, TranscriptionData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setXMLDocAsync(ByVal TranscriptionID As String, ByVal TranscriptionData As String)
            Me.setXMLDocAsync(TranscriptionID, TranscriptionData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setXMLDocAsync(ByVal TranscriptionID As String, ByVal TranscriptionData As String, ByVal userState As Object)
            If (Me.setXMLDocOperationCompleted Is Nothing) Then
                Me.setXMLDocOperationCompleted = AddressOf Me.OnsetXMLDocOperationCompleted
            End If
            Me.InvokeAsync("setXMLDoc", New Object() {TranscriptionID, TranscriptionData}, Me.setXMLDocOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetXMLDocOperationCompleted(ByVal arg As Object)
            If (Not (Me.setXMLDocCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setXMLDocCompleted(Me, New setXMLDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPathInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetPathInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPathInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub MTCJobListCompletedEventHandler(ByVal sender As Object, ByVal e As MTCJobListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MTCJobListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub MTCJobListTestCompletedEventHandler(ByVal sender As Object, ByVal e As MTCJobListTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MTCJobListTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub chkLoginCompletedEventHandler(ByVal sender As Object, ByVal e As chkLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class chkLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getLevelsbyUserIDCompletedEventHandler(ByVal sender As Object, ByVal e As getLevelsbyUserIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLevelsbyUserIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getExtendedCompletedEventHandler(ByVal sender As Object, ByVal e As getExtendedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getExtendedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getExtendedPPCompletedEventHandler(ByVal sender As Object, ByVal e As getExtendedPPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getExtendedPPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getDictationCompletedEventHandler(ByVal sender As Object, ByVal e As getDictationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getDictationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getNotesCompletedEventHandler(ByVal sender As Object, ByVal e As getNotesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getNotesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CheckOutAuditDictationCompletedEventHandler(ByVal sender As Object, ByVal e As CheckOutAuditDictationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckOutAuditDictationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CheckOutDictationCompletedEventHandler(ByVal sender As Object, ByVal e As CheckOutDictationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckOutDictationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getDictationInfoCompletedEventHandler(ByVal sender As Object, ByVal e As getDictationInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getDictationInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AuditTemplatesCompletedEventHandler(ByVal sender As Object, ByVal e As AuditTemplatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuditTemplatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getInstructionsCompletedEventHandler(ByVal sender As Object, ByVal e As getInstructionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getInstructionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getPhysicianTemplatesCompletedEventHandler(ByVal sender As Object, ByVal e As getPhysicianTemplatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPhysicianTemplatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getTemplateAttributesCompletedEventHandler(ByVal sender As Object, ByVal e As getTemplateAttributesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTemplateAttributesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DemoLookUpCompletedEventHandler(ByVal sender As Object, ByVal e As DemoLookUpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DemoLookUpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub MTC_DemoLookUpCompletedEventHandler(ByVal sender As Object, ByVal e As MTC_DemoLookUpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MTC_DemoLookUpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getClientCommentsCompletedEventHandler(ByVal sender As Object, ByVal e As getClientCommentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getClientCommentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getMTCClientCommentsCompletedEventHandler(ByVal sender As Object, ByVal e As getMTCClientCommentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMTCClientCommentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getPhySamplesCompletedEventHandler(ByVal sender As Object, ByVal e As getPhySamplesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPhySamplesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getRefPhyCompletedEventHandler(ByVal sender As Object, ByVal e As getRefPhyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getRefPhyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getCommentsCompletedEventHandler(ByVal sender As Object, ByVal e As getCommentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCommentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CheckInAuditDictationCompletedEventHandler(ByVal sender As Object, ByVal e As CheckInAuditDictationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckInAuditDictationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CheckInDictationCompletedEventHandler(ByVal sender As Object, ByVal e As CheckInDictationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckInDictationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateTranscriptionStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTranscriptionStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTranscriptionStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddNewPatientCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewPatientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewPatientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CompletedJobsListCompletedEventHandler(ByVal sender As Object, ByVal e As CompletedJobsListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CompletedJobsListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AuditedJobsListCompletedEventHandler(ByVal sender As Object, ByVal e As AuditedJobsListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuditedJobsListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ETS_FilesCompletedEventHandler(ByVal sender As Object, ByVal e As ETS_FilesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ETS_FilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SplitAudioCompletedEventHandler(ByVal sender As Object, ByVal e As SplitAudioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SplitAudioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getActLocationsCompletedEventHandler(ByVal sender As Object, ByVal e As getActLocationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getActLocationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateAutoDownloadLogCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAutoDownloadLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAutoDownloadLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SendMailAlertsCompletedEventHandler(ByVal sender As Object, ByVal e As SendMailAlertsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMailAlertsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getXMLDocCompletedEventHandler(ByVal sender As Object, ByVal e As getXMLDocCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getXMLDocCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub setXMLDocCompletedEventHandler(ByVal sender As Object, ByVal e As setXMLDocCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setXMLDocCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
